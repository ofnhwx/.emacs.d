#+TITLE: user-config.org
#+STARTUP: overview

* 通常の設定
** モードラインの表示調整
   #+BEGIN_SRC emacs-lisp
     (spacemacs|diminish company-mode)
     (spacemacs|diminish company-box-mode)
     (spacemacs|diminish emoji-cheat-sheet-plus-display-mode)
     (spacemacs|diminish hybrid-mode)
     (spacemacs|diminish smartparens-mode)
     (spacemacs|diminish which-key-mode)
     (spacemacs|diminish yas-minor-mode)
   #+END_SRC
* パッケージ毎の設定
** core-dotspacemacs
   #+BEGIN_SRC emacs-lisp
     (use-package core-dotspacemacs
       :config
       ;; 現在のファイルの文字/改行コードを分かりやすく表示
       (spaceline-define-segment buffer-encoding-abbrev
         "The line ending convention used in the buffer."
         (let ((buf-coding (format "%s" buffer-file-coding-system)))
           (list (replace-regexp-in-string "-with-signature\\|-unix\\|-dos\\|-mac" "" buf-coding)
                 (concat (and (string-match "with-signature" buf-coding) "ⓑ")
                         (and (string-match "unix"           buf-coding) "ⓤ")
                         (and (string-match "dos"            buf-coding) "ⓓ")
                         (and (string-match "mac"            buf-coding) "ⓜ")
                         )))
         :separator " "))
   #+END_SRC
** atomic-chrome
   #+BEGIN_SRC emacs-lisp
     (use-package atomic-chrome
       :config
       ;; サーバーを起動
       (atomic-chrome-start-server))
   #+END_SRC
** display-line-numbers
   #+BEGIN_SRC emacs-lisp
     (use-package display-line-numbers
       :config
       ;; 標準で4桁表示
       (setq-default display-line-numbers-width 4)
       ;; 特定のモードで有効化
       (defun display-line-numbers-mode-on ()
         "`display-line-numbers-mode'を有効化."
         (interactive)
         (display-line-numbers-mode 1))
       (defun display-line-numbers-mode-off ()
         "`display-line-numbers-mode'を無効化."
         (interactive)
         (display-line-numbers-mode 0))
       (add-hook 'prog-mode-hook 'display-line-numbers-mode-on)
       (add-hook 'find-file-hook 'display-line-numbers-mode-on)
       (add-hook 'html-mode-hook 'display-line-numbers-mode-on))
   #+END_SRC
** evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :config
       ;; 設定
       (setq evil-cross-lines t)
       (setq evil-move-cursor-back nil)
       ;; キーバインド
       (setq evil-disable-insert-state-bindings t)
       (bind-keys
        ;; モーションモード(motion -> normal -> visual)
        :map evil-motion-state-map
        ("C-^" . nil) ;; evil-buffer
        ;; 通常モード
        :map evil-normal-state-map
        ("<down>" . evil-next-visual-line)
        ("<up>" . evil-previous-visual-line)
        ("j" . evil-next-visual-line)
        ("k" . evil-previous-visual-line)
        ("gj" . evil-avy-goto-line-below)
        ("gk" . evil-avy-goto-line-above)
        ("s" . evil-avy-goto-char-timer)
        ;; ビジュアルモード
        :map evil-visual-state-map
        ;; 挿入モード
        :map evil-insert-state-map
        ;; オペレーターモード
        :map evil-operator-state-map
        ;; 置き換えモード
        :map evil-replace-state-map
        ;; Emacsモード
        :map evil-emacs-state-map)
       ;; normal-state に戻す設定を追加
       (defun e:evil-force-normal-state ()
         (cond
          ((eq evil-state 'visual)
           (evil-exit-visual-state))
          ((member evil-state '(insert hybrid))
           (evil-force-normal-state))))
       (defun e:save-buffer:after (&rest args)
         (e:evil-force-normal-state))
       (defun e:keyboard-quit:before (&rest args)
         (e:evil-force-normal-state))
       (advice-add 'save-buffer :after 'e:save-buffer:after)
       (advice-add 'keyboard-quit :before 'e:keyboard-quit:before))
   #+END_SRC
** persistent-scratch
   #+BEGIN_SRC emacs-lisp
     (use-package persistent-scratch
       :init
       ;; ファイルを移動
       (set-variable 'persistent-scratch-save-file (expand-file-name "scratch" e:private-directory))
       :config
       ;; 自動設定
       (persistent-scratch-setup-default))
   #+END_SRC
** ranger
   #+BEGIN_SRC emacs-lisp
     (use-package ranger
       :config
       (defun ranger--header-lhs ()
         "Setup header-line for ranger buffer."
         (let* ((current-file (abbreviate-file-name (or (r--fget ranger-current-file) "")))
                (project-root (e:project-root current-file))
                (project-name (if project-root (concat "[" (e:project-name project-root) "]")))
                (file-path (replace-regexp-in-string (regexp-quote (or project-root "")) ""
                                                     (or (file-name-directory current-file) "")))
                (file-name (file-name-nondirectory current-file)))
           (format " %s%s%s"
                   (propertize (or project-name "") 'face 'font-lock-keyword-face)
                   file-path
                   (propertize file-name 'face 'font-lock-constant-face))))
       (defun e:ranger-override-dired-mode-on ()
         (ranger-override-dired-mode 1))
       (advice-add 'ranger-mode :after 'e:ranger-override-dired-mode-on)
       (e:ranger-override-dired-mode-on))
   #+END_SRC
** tramp
   #+BEGIN_SRC emacs-lisp :noweb yes
     (use-package tramp
       :init
       ;; デフォルトの接続先の名称を変更
       (set-variable 'tramp-default-host "localhost")
       :config
       <<tramp-sh>>
       <<helm-tramp>>)
   #+END_SRC
*** tramp-sh
    #+NAME: tramp-sh
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package tramp-sh
        :config
        ;; ssh/conf.d の内容を接続先に追加
        (let* ((files (--filter (not (file-directory-p it))
                                (-map 'abbreviate-file-name (directory-files "~/.ssh/conf.d/hosts" t))))
               (functions (--map (list 'tramp-parse-sconfig it) files)))
          (dolist (method '("ssh" "scp"))
            (let ((functions (append (tramp-get-completion-function method) functions)))
              (tramp-set-completion-function method functions)))))
    #+END_SRC
*** helm-tramp
    #+NAME: helm-tramp
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package helm-tramp
        :defer t
        :config
        ;; ssh/conf.d の内容を接続先に追加
        (defun e:helm-tramp--candidates:filter-return (result)
          (dolist (host (--filter (not (string-equal it tramp-default-host))
                                  (-distinct (-flatten (-map 'eval (tramp-get-completion-function "ssh"))))))
            (push (format "/%s:%s:" tramp-default-method host) result)
            (push (format "/ssh:%s|sudo:%s:/" host host) result))
          (-distinct (reverse result)))
        (advice-add 'helm-tramp--candidates :filter-return 'e:helm-tramp--candidates:filter-return))
    #+END_SRC
* パッケージ毎の設定(遅延あり)
** company-box
   #+BEGIN_SRC emacs-lisp
     (use-package company-box
       :defer t
       :init
       ;; 有効化
       (set-variable 'company-box-enable-icon nil)
       (add-hook 'company-mode-hook 'company-box-mode))
   #+END_SRC
** evil-easymotion
   #+BEGIN_SRC emacs-lisp
     (use-package evil-easymotion
       :defer t
       :after (evil)
       :init
       (define-prefix-command 'e:evil-em-command)
       (bind-keys
        :map e:evil-em-command
        ("w"  . evilem-motion-forward-word-begin)
        ("W"  . evilem-motion-forward-WORD-begin)
        ("e"  . evilem-motion-forward-word-end)
        ("E"  . evilem-motion-forward-WORD-end)
        ("b"  . evilem-motion-backward-word-begin)
        ("B"  . evilem-motion-backward-WORD-begin)
        ("ge" . evilem-motion-backward-word-end)
        ("gE" . evilem-motion-backward-WORD-end)
        ("j"  . evilem-motion-next-line)
        ("k"  . evilem-motion-previous-line)
        ("gj" . evilem-motion-next-visual-line)
        ("gk" . evilem-motion-previous-visual-line)
        ("t"  . evilem-motion-find-char-to)
        ("T"  . evilem-motion-find-char-to-backward)
        ("f"  . evilem-motion-find-char)
        ("F"  . evilem-motion-find-char-backward)
        ("[[" . evilem-motion-backward-section-begin)
        ("[]" . evilem-motion-backward-section-end)
        ("]]" . evilem-motion-forward-section-begin)
        ("][" . evilem-motion-forward-section-end)
        ("("  . evilem-motion-backward-sentence-begin)
        (")"  . evilem-motion-forward-sentence-begin)
        ("n"  . evilem-motion-search-next)
        ("N"  . evilem-motion-search-previous)
        ("*"  . evilem-motion-search-word-forward)
        ("#"  . evilem-motion-search-word-backward)
        ("-"  . evilem-motion-previous-line-first-non-blank)
        ("+"  . evilem-motion-next-line-first-non-blank))
       (bind-key "S" 'e:evil-em-command evil-normal-state-map)
       (bind-key "x" 'e:evil-em-command evil-visual-state-map)
       (bind-key "x" 'e:evil-em-command evil-operator-state-map))
   #+END_SRC
** eww
   #+BEGIN_SRC emacs-lisp
     (use-package eww
       :defer t
       :config
       ;; 色の有効/無効を切替え
       (defvar e:eww-enable-colorize nil)
       (defun e:eww-colorize-region:around (&rest args)
         (when e:eww-enable-colorize
           (apply (car args) (cdr args))))
       (defun e:eww-colorize-on ()
         (interactive)
         (setq-local e:eww-enable-colorize t)
         (eww-reload))
       (defun e:eww-colorize-off ()
         (interactive)
         (setq-local e:eww-enable-colorize nil)
         (eww-reload))
       (advice-add 'eww-colorize-region :around 'e:eww-colorize-region:around)
       (advice-add 'shr-colorize-region :around 'e:eww-colorize-region:around))
   #+END_SRC
** helpful
   #+BEGIN_SRC emacs-lisp
     (use-package helpful
       :defer t
       :init
       ;; キーバインド
       (spacemacs/declare-prefix "hdd" "helpful")
       (spacemacs/set-leader-keys
         "hddc" 'helpful-callable
         "hddd" 'helpful-at-point
         "hddf" 'helpful-function
         "hddi" 'helpful-command
         "hddk" 'helpful-key
         "hddm" 'helpful-macro
         "hdds" 'helpful-symbol
         "hddv" 'helpful-variable))
   #+END_SRC
** magit-todos
   #+BEGIN_SRC emacs-lisp
     (use-package magit-todos
       :defer t
       :init
       (defun e:magit-todos-mode-on ()
         (let ((inhibit-message t))
           (magit-todos-mode 1)))
       (add-hook 'magit-mode-hook 'e:magit-todos-mode-on))
   #+END_SRC
** navi2ch
   #+BEGIN_SRC emacs-lisp
     (use-package navi2ch
       :load-path "external/navi2ch"
       :defer t
       :commands (navi2ch)
       :init
       ;; proxy 設定
       (setq navi2ch-net-http-proxy "127.0.0.1:9080")
       :config
       ;; 2chproxy.pl を起動
       (when (require 'prodigy nil t)
         (let ((cmd (expand-file-name "2chproxy.pl/2chproxy.pl" e:external-directory))
               (yml (expand-file-name "2chproxy.yml" e:custom-directory)))
           (when (and (executable-find cmd)
                      (file-exists-p yml))
             (prodigy-define-service
               :name "2chproxy.pl"
               :command (format "%s --config %s" cmd yml)
               :tags '(general)
               :kill-signal 'sigkill)))
         (defun e:prodigy:2chproxy.pl ()
           (interactive)
           (e:prodigy-start-service "2chproxy.pl"))
         (e:prodigy:2chproxy.pl)))
   #+END_SRC
** skk
   #+BEGIN_SRC emacs-lisp
     (use-package skk
       :defer t
       :config
       ;; キーバインドを追加
       (bind-key [remap toggle-input-method] 'skk-mode)
       (bind-keys
        :map global-map
        ("C-¥" . skk-mode))
       ;; skk-study を有効化
       (require 'skk-study nil t)
       ;; google-ime-skk を起動
       (when (and (executable-find "google-ime-skk")
                  (require 'prodigy nil t))
         (prodigy-define-service
           :name "google-ime-skk"
           :command "google-ime-skk"
           :tags '(general)
           :kill-signal 'sigkill)
         (defun e:prodigy:google-ime-skk ()
           (interactive)
           (e:prodigy-start-service "google-ime-skk"))
         (e:prodigy:google-ime-skk))
       ;; evil に連動して切替え
       (defun e:skk-latin-mode-on:before (&rest args)
         (unless skk-mode-invoked
           (skk-mode-invoke)))
       (advice-add 'skk-latin-mode-on :before 'e:skk-latin-mode-on:before)
       (add-hook 'evil-hybrid-state-entry-hook 'skk-latin-mode-on)
       (add-hook 'evil-hybrid-state-exit-hook  'skk-mode-exit))
   #+END_SRC
** visual-regexp
   #+BEGIN_SRC emacs-lisp
     (use-package visual-regexp
       :defer t
       :init
       (bind-key [remap query-replace] 'vr/query-replace))
   #+END_SRC
** vterm
   #+BEGIN_SRC emacs-lisp
     (use-package vterm
       :load-path "external/emacs-libvterm"
       :defer t
       :commands (vterm))
   #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :defer t
       :config
       ;; ヒントが出るまでの時間を調整
       (setq which-key-idle-delay 1.0)
       (setq which-key-idle-secondary-delay 0.1))
   #+END_SRC
* パッケージ毎の設定(独自)
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path (expand-file-name "lisp" e:custom-directory))
  #+END_SRC
** open-by-jetbrains-ide
   #+BEGIN_SRC emacs-lisp
     (use-package open-by-jetbrains-ide
       :load-path "custom/lisp"
       :config
       (spacemacs/declare-prefix "aj" "jetbrains")
       (spacemacs/set-leader-keys
         "ajj" 'jetbrains:open-by-ide
         "ajc" 'jetbrains:open-by-clion
         "aji" 'jetbrains:open-by-idea
         "ajp" 'jetbrains:open-by-pstorm))
   #+END_SRC
* パッチ対応
  #+BEGIN_SRC emacs-lisp
    (require 'pkg-info)
  #+END_SRC
** vagrant-tramp
   #+BEGIN_SRC emacs-lisp
     (let ((version (pkg-info-format-version (pkg-info-package-version 'vagrant-tramp)))
           (target "20190125.1859"))
       (if (string-equal version target)
           (use-package vagrant-tramp
             :defer t
             :config
             (defun vagrant-tramp--all-boxes ()
               "List of VMs per `vagrant global-status` as alists."
               (let* ((status-cmd "vagrant global-status --machine-readable")
                      (status-raw (shell-command-to-string status-cmd))
                      (status-lines (-drop 7 (split-string status-raw "\n")))
                      (status-data-raw (--map (mapconcat 'identity
                                                         (-drop 4 (split-string it ",")) ",")
                                              status-lines))
                      (status-data (--map (replace-regexp-in-string " " "" it) status-data-raw))
                      (status-groups (-butlast (-split-on "" status-data)))
                      (vm-attrs '(id name provider state dir)))
                 (--map (-zip vm-attrs it) status-groups))))
         (spacemacs-buffer/warning "`vagrant-tramp' was updated.")))
   #+END_SRC
** avy-migemo
   #+BEGIN_SRC emacs-lisp
     (let ((version (pkg-info-format-version (pkg-info-package-version 'avy-migemo)))
           (target "20180716.1455"))
       (if (string-equal version target)
           (use-package avy-migemo
             :defer t
             :config
             (defun e:avy--generic-jump:filter-args (args)
               (if (= (length args) 4)
                   args
                 (e:remove-nth 2 args)))
             (advice-add 'avy--generic-jump :filter-args 'e:avy--generic-jump:filter-args))
         (spacemacs-buffer/warning "`avy-migemo' was updated.")))
   #+END_SRC
