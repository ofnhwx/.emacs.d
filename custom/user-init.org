#+TITLE: user-init.org
#+STARTUP: overview

* 通常の設定
** ファイルを移動
*** プライベート
    #+BEGIN_SRC emacs-lisp
      (set-variable 'custom-file (expand-file-name "custom.el" e:private-directory))
      (set-variable 'auth-sources `(,(expand-file-name "authinfo.plist" e:private-directory)))
      (set-variable 'spacemacs-env-vars-file (expand-file-name "spacemacs.env" e:private-directory))
    #+END_SRC
*** キャッシュ
    #+BEGIN_SRC emacs-lisp
      (set-variable 'forge-database-file (expand-file-name "forge-database.sqlite" spacemacs-cache-directory))
      (set-variable 'lsp-session-file (expand-file-name "lsp-session-v1" spacemacs-cache-directory))
      (set-variable 'magithub-dir (expand-file-name "magithub" spacemacs-cache-directory))
      (set-variable 'transient-history-file (expand-file-name "transient/history.el" spacemacs-cache-directory))
      (set-variable 'transient-levels-file (expand-file-name "transient/levels.el" spacemacs-cache-directory))
      (set-variable 'transient-values-file (expand-file-name "transient/values.el" spacemacs-cache-directory))
      (set-variable 'url-cache-directory (expand-file-name "url/cache" spacemacs-cache-directory))
      (set-variable 'url-cookie-file (expand-file-name "url/cookies" spacemacs-cache-directory))
    #+END_SRC
** エンコーディングの設定
   #+BEGIN_SRC emacs-lisp
     (set-language-environment "Japanese")
     (let ((coding-system 'utf-8))
       (prefer-coding-system          coding-system)
       (set-default-coding-systems    coding-system)
       (set-buffer-file-coding-system coding-system)
       (set-terminal-coding-system    coding-system)
       (set-keyboard-coding-system    coding-system))
   #+END_SRC
** フォントの設定
   #+BEGIN_SRC emacs-lisp
     (defun e:spacemacs/set-default-font:after (&rest args)
       ;; 日本語関連
       (let* ((charsets '(japanese-jisx0208
                          japanese-jisx0208-1978
                          japanese-jisx0212
                          japanese-jisx0213-1
                          japanese-jisx0213-2
                          japanese-jisx0213.2004-1
                          japanese-jisx0213-a
                          katakana-jisx0201
                          katakana-sjis))
              (fontspec (font-spec :family e:font-name)))
         (dolist (charset charsets)
           (set-fontset-font t charset fontspec)))
       ;; リサイズ
       (setq face-font-rescale-alist `((,e:font-name . ,e:font-rescale)))
       ;; 対策: East Asian Ambiguous Width
       (add-to-list 'load-path (expand-file-name "locale-eaw" e:external-directory))
       (when (require 'eaw nil t)
         (eaw-fullwidth)))
     (advice-add 'spacemacs/set-default-font :after 'e:spacemacs/set-default-font:after)
   #+END_SRC
** ヘッダーラインの設定
*** ファイル用の設定
    #+BEGIN_SRC emacs-lisp
      (defun e:header-line-for-files-format ()
        "ファイル用のヘッダーラインのフォーマット"
        (let* ((path (or buffer-file-name "/path/to/filename.test"))
               (dir  (file-name-directory path))
               (file (buffer-name))
               (max  (- (window-width) (length file))))
          (concat
           (propertize " "
                       'display '(space :align-to 0))
           (propertize (e:shorten dir max))
           (propertize file
                       'face '(:foreground "#ff0000")))))
      (defun e:setup-headerline-for-files ()
        "ファイル用のヘッダーラインの設定"
        (setq-local spaceline-buffer-id-p nil)
        (set-face-attribute 'header-line nil
                            :inherit 'mode-line
                            :background (face-attribute 'mode-line :background))
        (setq-local header-line-format
                    '((:eval (e:header-line-for-files-format)))))
    #+END_SRC
*** 一定時間毎に実行
    #+BEGIN_SRC emacs-lisp
      (defun e:setup-headerline ()
        "ヘッダーラインをなるべくいい感じに設定する"
        (cl-dolist (window (window-list))
          (with-current-buffer (window-buffer window)
            (unless header-line-format
              (cond
               (buffer-file-name (e:setup-headerline-for-files)))))))
      (run-with-idle-timer 0.5 0.5 'e:setup-headerline)
    #+END_SRC
** Mac用の調整
*** タイトルバー
    #+BEGIN_SRC emacs-lisp
      (let ((items '((ns-transparent-titlebar . t)
                     (ns-appearance . dark))))
        (dolist (item items)
          (assq-delete-all (car item) initial-frame-alist)
          (assq-delete-all (car item) default-frame-alist)
          (add-to-list 'initial-frame-alist item)
          (add-to-list 'default-frame-alist item)))
    #+END_SRC
*** キーボード入力(option, command関連)
    #+BEGIN_SRC emacs-lisp
      (when (e:system-type-darwin-p)
        (set-variable 'ns-command-modifier 'meta)
        (set-variable 'ns-right-command-modifier 'super)
        (set-variable 'ns-alternate-modifier 'none))
    #+END_SRC
** 雑多なやつ
*** 「Viperize?」の確認をしない
    #+BEGIN_SRC emacs-lisp
      (set-variable 'viper-mode nil)
    #+END_SRC
*** shellの設定
    #+BEGIN_SRC emacs-lisp
      (set-variable 'shell-file-name
                    (or (executable-find "zsh")
                        (executable-find "bash")
                        (executable-find "sh")))
    #+END_SRC
*** パスワード関連
    #+BEGIN_SRC emacs-lisp
      (set-variable 'password-cache-expiry 3600)
      (set-variable 'plstore-encoded t)
    #+END_SRC
*** 折り返さない
    #+BEGIN_SRC emacs-lisp
      (setq-default truncate-lines t)
      (set-variable 'truncate-partial-width-windows nil)
    #+END_SRC
*** 最終行の改行は`EditorConfig'で管理
    #+BEGIN_SRC emacs-lisp
      (set-variable 'mode-require-final-newline nil)
      (set-variable 'require-final-newline nil)
    #+END_SRC
*** ロックファイルを作成しない
    #+BEGIN_SRC emacs-lisp
      (set-variable 'create-lockfiles nil)
    #+END_SRC
*** 右から左に読む言語に対応しない
    #+BEGIN_SRC emacs-lisp
      (setq-default bidi-display-reordering nil)
    #+END_SRC
* パッケージ毎の設定
** ace-window
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook ace-window
       :post-init
       (bind-keys
        :map global-map
        ("C-^" . ace-window))
       (set-variable 'aw-keys (number-sequence ?1 ?9)))
   #+END_SRC
** avy
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook avy
       :post-config
       (setq avy-keys (number-sequence ?a ?z))
       (setq avy-all-windows t))
   #+END_SRC
** ddskk
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook ddskk
       :post-init
       (set-variable 'default-input-method "japanese-skk")
       (progn
         (set-variable 'skk-user-directory (expand-file-name "ddskk" e:private-directory))
         (set-variable 'skk-large-jisyo (expand-file-name "dic-mirror/SKK-JISYO.L" e:external-directory)))
       (progn
         (set-variable 'skk-preload t)
         (set-variable 'skk-egg-like-newline t)
         (set-variable 'skk-share-private-jisyo t)
         (set-variable 'skk-show-annotation t)
         (set-variable 'skk-show-inline 'vertical)
         (set-variable 'skk-sticky-key ";")
         (set-variable 'skk-use-jisx0201-input-method t))
       (when (executable-find "google-ime-skk")
         (set-variable 'skk-server-prog (executable-find "google-ime-skk"))
         (set-variable 'skk-server-inhibit-startup-server t)
         (set-variable 'skk-server-host "127.0.0.1")
         (set-variable 'skk-server-portnum 55100)))
   #+END_SRC
** emmet-mode
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook emmet-mode
       :post-config
       ;; ddskk と相性が悪いので調整
       (bind-keys
        :map emmet-mode-keymap
        ("<C-return>" . nil)
        ("C-c C-j" . emmet-expand-line)
        ("C-j" . nil)))
   #+END_SRC
** eshell
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook eshell
       :post-init
       (set-variable 'eshell-history-size 100000))
   #+END_SRC
** flycheck
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook flycheck
       :post-init
       (set-variable 'flycheck-idle-buffer-switch-delay 3.0)
       (set-variable 'flycheck-idle-change-delay 3.0))
   #+END_SRC
** git-gutter
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook git-gutter
       :post-config
       (dolist (face '(git-gutter:added
                       git-gutter:deleted
                       git-gutter:modified))
         (set-face-attribute face nil :background (face-attribute face :foreground))))
   #+END_SRC
** git-gutter+
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook git-gutter+
       :post-config
       (dolist (face '(git-gutter+-added
                       git-gutter+-deleted
                       git-gutter+-modified))
         (set-face-attribute face nil :background (face-attribute face :foreground))))
   #+END_SRC
** google-translate
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook google-translate
       :post-init
       (set-variable 'google-translate-default-source-language nil)
       (set-variable 'google-translate-default-target-language "ja"))
   #+END_SRC
** helm
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook helm
       :post-init
       (bind-key [remap eval-expression] 'helm-eval-expression)
       (with-eval-after-load 'eldoc-eval
         (bind-key [remap eldoc-eval-expression] 'helm-eval-expression eldoc-in-minibuffer-mode-map)))
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook magit
       :post-init
       (set-variable 'magit-log-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width t 15))
       (set-variable 'magit-diff-refine-hunk 'all)
       (set-variable 'smerge-refine-ignore-whitespace nil)
       :post-config
       (when (executable-find "ghq")
         (let ((dirs (s-split "\n" (s-trim (shell-command-to-string "ghq list --full-path")))))
           (set-variable 'magit-repository-directories
                         (--map (cons it 0) dirs))))
       (evil-define-key 'normal magit-mode-map (kbd "<escape>") 'ignore))
   #+END_SRC
** notmuch
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook notmuch
       :post-init
       (set-variable 'notmuch-archive-tags '("-inbox" "-unread"))
       (set-variable 'notmuch-column-control 1.0)
       (set-variable 'notmuch-hello-thousands-separator ",")
       (set-variable 'notmuch-search-oldest-first nil)
       (set-variable 'notmuch-show-empty-saved-searches t)
       (set-variable 'notmuch-show-logo nil)
       (set-variable 'notmuch-hello-hide-tags
                     '("encrypted" "drafts" "flagged" "inbox" "sent" "signed" "spam" "unread"))
       (set-variable 'notmuch-saved-searches
                     '((:name "受信トレイ" :query "tag:inbox"   :key "i")
                       (:name "未読　　　" :query "tag:unread"  :key "u")
                       (:name "スター付き" :query "tag:flagged" :key "f")
                       (:name "送信済み　" :query "tag:sent"    :key "t")
                       (:name "下書き　　" :query "tag:draft"   :key "d")
                       (:name "すべて　　" :query "*"           :key "a")
                       (:name "迷惑メール" :query "tag:spam"    :key "s")))
       (setenv "XAPIAN_CJK_NGRAM" "1"))
   #+END_SRC
** org
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook org
       :post-init
       (set-variable 'org-directory (expand-file-name "org" e:private-directory))
       (let ((org-agenda-directory (expand-file-name "agenda" org-directory)))
         (when (file-directory-p org-agenda-directory)
           (set-variable 'org-agenda-files (cl-remove-if 'file-directory-p (directory-files org-agenda-directory t))))))
   #+END_SRC
** php-mode
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook php-mode
       :post-init
       (spacemacs|add-company-backends
         :modes php-mode))
   #+END_SRC
** prodigy
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook prodigy
       :post-init
       (defun e:prodigy-start-service (name)
         (let ((service (prodigy-find-service name)))
           (when service
             (prodigy-start-service service)))))
   #+END_SRC
** recentf
   #+BEGIN_SRC emacs-lisp
     (spacemacs|use-package-add-hook recentf
       :post-init
       (set-variable 'recentf-max-menu-items 20)
       (set-variable 'recentf-max-saved-items 3000)
       (set-variable 'recentf-filename-handlers '(abbreviate-file-name))
       :post-config
       (progn
         (defun e:recentf-save-list:before (&rest args)
           (let ((list nil))
             (dolist (file (mapcar 'abbreviate-file-name recentf-list))
               (or (member file list)
                   (push file list)))
             (setq recentf-list (reverse list))))
         (advice-add 'recentf-save-list :before 'e:recentf-save-list:before)))
   #+END_SRC
