#+TITLE: user-config.org
#+STARTUP: overview

* 環境設定
** 日本語環境
*** 言語環境
    #+BEGIN_SRC emacs-lisp
      (set-language-environment "Japanese")
    #+END_SRC
*** エンコーディング
    #+BEGIN_SRC emacs-lisp
      (let ((coding-system 'utf-8))
        (prefer-coding-system          coding-system)
        (set-default-coding-systems    coding-system)
        (set-buffer-file-coding-system coding-system)
        (set-terminal-coding-system    coding-system)
        (set-keyboard-coding-system    coding-system))
    #+END_SRC
*** フォント
    #+BEGIN_SRC emacs-lisp
      (defun e:advice:spacemacs/set-default-font:after (&rest args)
        ;; 設定
        (let* ((charsets '(japanese-jisx0208
                           japanese-jisx0208-1978
                           japanese-jisx0212
                           japanese-jisx0213-1
                           japanese-jisx0213-2
                           japanese-jisx0213.2004-1
                           japanese-jisx0213-a
                           katakana-jisx0201
                           katakana-sjis))
               (fontspec (font-spec :family e:font-name)))
          (dolist (charset charsets)
            (set-fontset-font t charset fontspec)))
        ;; リサイズ
        (setq face-font-rescale-alist `((,e:font-name . ,e:font-rescale)))
        ;; 対策: East Asian Ambiguous Width
        (add-to-list 'load-path (expand-file-name "locale-eaw" e:external-directory))
        (when (require 'eaw nil t)
          (eaw-fullwidth)))
      (advice-add 'spacemacs/set-default-font :after 'e:advice:spacemacs/set-default-font:after)
    #+END_SRC
** 情報表示
*** ヘッダーライン
**** ファイル用の設定
     #+BEGIN_SRC emacs-lisp
       (defun e:header-line-for-files-format ()
         "ファイル用のヘッダーラインのフォーマット"
         (let* ((buffer (current-buffer))
                (path   (abbreviate-file-name (buffer-file-name buffer)))
                (file   (buffer-name buffer))
                (dir    (file-name-directory path))
                (limit  (- (window-width) (length file)))
                (project-root (e:project-root (file-name-directory path)))
                (project-name (and project-root (format "[%s]" (e:project-name project-root)))))
           ;; プロジェクト内のファイルの場合はプロジェクト名を省略
           (when project-root
             (setq dir   (replace-regexp-in-string (regexp-quote project-root) "" dir))
             (setq limit (- limit (length project-name))))
           ;; ディレクトリ部分を頑張って短くする
           (setq dir (e:shorten dir limit))
           (let ((index (s-index-of "..." dir)))
             (when index
               (set-text-properties index (+ index 3) '(face font-lock-comment-face) dir)))
           ;; 属性を設定しつつ結合する
           (concat
            (propertize " " 'display '(space :align-to 0))
            (propertize (or project-name "") 'face 'font-lock-keyword-face)
            dir
            (propertize file 'face 'font-lock-constant-face))))
       (defun e:setup-headerline-for-files ()
         "ファイル用のヘッダーラインの設定"
         (setq-local spaceline-buffer-id-p nil)
         (set-face-attribute 'header-line nil
                             :inherit 'mode-line
                             :background (face-attribute 'mode-line :background))
         (setq-local header-line-format
                     '((:eval (e:header-line-for-files-format)))))
     #+END_SRC
**** 一定時間毎に実行
     #+BEGIN_SRC emacs-lisp
       (defun e:setup-headerline ()
         "ヘッダーラインをなるべくいい感じに設定する"
         (cl-dolist (window (window-list))
           (with-current-buffer (window-buffer window)
             (unless header-line-format
               (cond
                (buffer-file-name (e:setup-headerline-for-files)))))))
       (run-with-idle-timer 0.5 0.5 'e:setup-headerline)
     #+END_SRC
*** モードライン
**** 現在のファイルの文字/改行コードを分かりやすく表示
     #+BEGIN_SRC emacs-lisp
       (spaceline-define-segment buffer-encoding-abbrev
         "The line ending convention used in the buffer."
         (let ((buf-coding (format "%s" buffer-file-coding-system)))
           (list (replace-regexp-in-string "-with-signature\\|-unix\\|-dos\\|-mac" "" buf-coding)
                 (concat (and (string-match "with-signature" buf-coding) "ⓑ")
                         (and (string-match "unix"           buf-coding) "ⓤ")
                         (and (string-match "dos"            buf-coding) "ⓓ")
                         (and (string-match "mac"            buf-coding) "ⓜ")
                         )))
         :separator " ")
     #+END_SRC
**** 不要なモードを非表示
     #+BEGIN_SRC emacs-lisp
       (spacemacs|diminish company-mode)
       (spacemacs|diminish company-box-mode)
       (spacemacs|diminish emoji-cheat-sheet-plus-display-mode)
       (spacemacs|diminish hybrid-mode)
       (spacemacs|diminish smartparens-mode)
       (spacemacs|diminish which-key-mode)
       (spacemacs|diminish yas-minor-mode)
     #+END_SRC
** パスの追加
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (expand-file-name "lisp" e:custom-directory))
   #+END_SRC
** 雑多なやつ
*** 「Viperize?」の確認をしない
    #+BEGIN_SRC emacs-lisp
      (set-variable 'viper-mode nil)
    #+END_SRC
*** shell の設定
    #+BEGIN_SRC emacs-lisp
      (set-variable 'shell-file-name
                    (or (executable-find "zsh")
                        (executable-find "bash")
                        (executable-find "sh")))
    #+END_SRC
*** パスワード関連
    #+BEGIN_SRC emacs-lisp
      (set-variable 'password-cache-expiry 3600)
      (set-variable 'plstore-encoded t)
    #+END_SRC
*** 折り返さない
    #+BEGIN_SRC emacs-lisp
      (setq-default truncate-lines t)
      (set-variable 'truncate-partial-width-windows nil)
    #+END_SRC
*** 最終行の改行は EditorConfig で管理する
    #+BEGIN_SRC emacs-lisp
      (set-variable 'mode-require-final-newline nil)
      (set-variable 'require-final-newline nil)
    #+END_SRC
*** ロックファイルを作成しない
    #+BEGIN_SRC emacs-lisp
      (set-variable 'create-lockfiles nil)
    #+END_SRC
*** 右から左に読む言語に対応しない
    #+BEGIN_SRC emacs-lisp
      (setq-default bidi-display-reordering nil)
    #+END_SRC
*** 特定のバッファを消させない
    #+BEGIN_SRC emacs-lisp
      (dolist (buffer '("*scratch*" "*Messages*"))
        (with-current-buffer buffer
          (emacs-lock-mode 'kill)))
    #+END_SRC
** 個別設定
*** Mac
**** タイトルバー
     #+BEGIN_SRC emacs-lisp
       (let ((items '((ns-transparent-titlebar . t)
                      (ns-appearance . dark))))
         (dolist (item items)
           (assq-delete-all (car item) initial-frame-alist)
           (assq-delete-all (car item) default-frame-alist)
           (add-to-list 'initial-frame-alist item)
           (add-to-list 'default-frame-alist item)))
     #+END_SRC
**** キーボード入力(option, command関連)
     #+BEGIN_SRC emacs-lisp
       (when (e:system-type-darwin-p)
         (set-variable 'ns-command-modifier 'meta)
         (set-variable 'ns-right-command-modifier 'super)
         (set-variable 'ns-alternate-modifier 'none))
     #+END_SRC
*** ローカル
    #+BEGIN_SRC emacs-lisp
      (let ((private-config (expand-file-name "config.el" e:private-directory)))
        (when (file-exists-p private-config)
          (load-file private-config)))
    #+END_SRC
* パッケージ毎の設定
** ace-window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :bind
       (:map global-map
             ("C-^" . ace-window))
       :init
       (set-variable 'aw-keys (number-sequence ?1 ?9)))
   #+END_SRC
** atomic-chrome
   #+BEGIN_SRC emacs-lisp
     (use-package atomic-chrome
       :config
       (atomic-chrome-start-server))
   #+END_SRC
** auth-source
   #+BEGIN_SRC emacs-lisp
     (use-package auth-source
       :defer t
       :init
       (set-variable 'auth-sources (list (expand-file-name "authinfo.plist" e:private-directory))))
   #+END_SRC
** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :defer t
       :init
       (set-variable 'avy-keys (number-sequence ?a ?z))
       (set-variable 'avy-all-windows t))
   #+END_SRC
** company-box
   #+BEGIN_SRC emacs-lisp
     (use-package company-box
       :hook (company-mode . company-box-mode)
       :init
       (set-variable 'company-box-enable-icon nil))
   #+END_SRC
** display-line-numbers
   #+BEGIN_SRC emacs-lisp
     (use-package display-line-numbers
       :hook ((find-file . e:display-line-numbers-mode-on)
              (prog-mode . e:display-line-numbers-mode-on)
              (html-mode . e:display-line-numbers-mode-on))
       :init
       (setq-default display-line-numbers-width 4)
       :config
       (defun e:display-line-numbers-mode-on ()
         "`display-line-numbers-mode'を有効化."
         (interactive)
         (display-line-numbers-mode 1))
       (defun e:display-line-numbers-mode-off ()
         "`display-line-numbers-mode'を無効化."
         (interactive)
         (display-line-numbers-mode 0)))
   #+END_SRC
** elisp-demos
   #+BEGIN_SRC emacs-lisp
     (use-package elisp-demos
       :defer t
       :init
       (advice-add 'describe-function-1 :after 'elisp-demos-advice-describe-function-1)
       (advice-add 'helpful-update :after 'elisp-demos-advice-helpful-update))
   #+END_SRC
** emmet-mode
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :bind
       (:map emmet-mode-keymap
             ("<C-return>" . nil)
             ("C-c C-j" . emmet-expand-line)
             ("C-j" . nil)))
   #+END_SRC
** eshell
   #+BEGIN_SRC emacs-lisp
     (use-package eshell
       :defer t
       :init
       (set-variable 'eshell-history-size 100000))
   #+END_SRC
** evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :defer t
       :init
       (set-variable 'evil-cross-lines t)
       (set-variable 'evil-move-cursor-back nil)
       :config
       ;; キーバインド
       (setq evil-disable-insert-state-bindings t)
       (bind-keys
        ;; モーションモード(motion -> normal -> visual)
        :map evil-motion-state-map
        ("C-^" . nil) ;; evil-buffer
        ;; 通常モード
        :map evil-normal-state-map
        ("<down>" . evil-next-visual-line)
        ("<up>" . evil-previous-visual-line)
        ("j" . evil-next-visual-line)
        ("k" . evil-previous-visual-line)
        ("gj" . evil-avy-goto-line-below)
        ("gk" . evil-avy-goto-line-above)
        ("s" . evil-avy-goto-char-timer)
        ;; ビジュアルモード
        :map evil-visual-state-map
        ;; 挿入モード
        :map evil-insert-state-map
        ;; オペレーターモード
        :map evil-operator-state-map
        ;; 置き換えモード
        :map evil-replace-state-map
        ;; Emacsモード
        :map evil-emacs-state-map)
       ;; normal-state に戻す設定を追加
       (defun e:evil-force-normal-state ()
         (cond
          ((eq evil-state 'visual)
           (evil-exit-visual-state))
          ((member evil-state '(insert hybrid))
           (evil-force-normal-state))))
       (defun e:advice:save-buffer:after (&rest args)
         (e:evil-force-normal-state))
       (defun e:advice:keyboard-quit:before (&rest args)
         (e:evil-force-normal-state))
       (advice-add 'save-buffer :after 'e:advice:save-buffer:after)
       (advice-add 'keyboard-quit :before 'e:advice:keyboard-quit:before))
   #+END_SRC
*** evil-easymotion
    #+BEGIN_SRC emacs-lisp
      (use-package evil-easymotion
        :defer t
        :after (evil)
        :init
        (define-prefix-command 'e:evil-em-command)
        (bind-keys
         :map e:evil-em-command
         ("w"  . evilem-motion-forward-word-begin)
         ("W"  . evilem-motion-forward-WORD-begin)
         ("e"  . evilem-motion-forward-word-end)
         ("E"  . evilem-motion-forward-WORD-end)
         ("b"  . evilem-motion-backward-word-begin)
         ("B"  . evilem-motion-backward-WORD-begin)
         ("ge" . evilem-motion-backward-word-end)
         ("gE" . evilem-motion-backward-WORD-end)
         ("j"  . evilem-motion-next-line)
         ("k"  . evilem-motion-previous-line)
         ("gj" . evilem-motion-next-visual-line)
         ("gk" . evilem-motion-previous-visual-line)
         ("t"  . evilem-motion-find-char-to)
         ("T"  . evilem-motion-find-char-to-backward)
         ("f"  . evilem-motion-find-char)
         ("F"  . evilem-motion-find-char-backward)
         ("[[" . evilem-motion-backward-section-begin)
         ("[]" . evilem-motion-backward-section-end)
         ("]]" . evilem-motion-forward-section-begin)
         ("][" . evilem-motion-forward-section-end)
         ("("  . evilem-motion-backward-sentence-begin)
         (")"  . evilem-motion-forward-sentence-begin)
         ("n"  . evilem-motion-search-next)
         ("N"  . evilem-motion-search-previous)
         ("*"  . evilem-motion-search-word-forward)
         ("#"  . evilem-motion-search-word-backward)
         ("-"  . evilem-motion-previous-line-first-non-blank)
         ("+"  . evilem-motion-next-line-first-non-blank))
        (bind-key "S" 'e:evil-em-command evil-normal-state-map)
        (bind-key "x" 'e:evil-em-command evil-visual-state-map)
        (bind-key "x" 'e:evil-em-command evil-operator-state-map))
    #+END_SRC
** eww
   #+BEGIN_SRC emacs-lisp
     (use-package eww
       :no-require
       :after (:any eww shr)
       :config
       ;; 色の有効/無効を切替え
       (defvar e:eww-enable-colorize nil)
       (defun e:advice:eww-colorize-region:around (&rest args)
         (when e:eww-enable-colorize
           (apply (car args) (cdr args))))
       (defun e:eww-colorize-on ()
         (interactive)
         (setq-local e:eww-enable-colorize t)
         (eww-reload))
       (defun e:eww-colorize-off ()
         (interactive)
         (setq-local e:eww-enable-colorize nil)
         (eww-reload))
       (advice-add 'eww-colorize-region :around 'e:advice:eww-colorize-region:around)
       (advice-add 'shr-colorize-region :around 'e:advice:eww-colorize-region:around))
   #+END_SRC
** flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :defer t
       :init
       (set-variable 'flycheck-idle-buffer-switch-delay 3.0)
       (set-variable 'flycheck-idle-change-delay 3.0))
   #+END_SRC
** git-gutter
*** git-gutter
    #+BEGIN_SRC emacs-lisp
      (use-package git-gutter
        :defer t
        :config
        (dolist (face '(git-gutter:added
                        git-gutter:deleted
                        git-gutter:modified))
          (set-face-attribute face nil :background (face-attribute face :foreground))))
    #+END_SRC
*** git-gutter+
    #+BEGIN_SRC emacs-lisp
      (use-package git-gutter+
        :defer t
        :config
        (dolist (face '(git-gutter+-added
                        git-gutter+-deleted
                        git-gutter+-modified))
          (set-face-attribute face nil :background (face-attribute face :foreground))))
    #+END_SRC
** google-translate
   #+BEGIN_SRC emacs-lisp
     (use-package google-translate
       :defer t
       :init
       (set-variable 'google-translate-default-source-language nil)
       (set-variable 'google-translate-default-target-language "ja"))
   #+END_SRC
** helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :bind
       (:map global-map
             ([remap eval-expression] . helm-eval-expression))
       :init
       (set-variable 'helm-buffer-max-length nil))
   #+END_SRC
*** after: eldoc-eval
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :after (eldoc-eval)
        :bind
        (:map eldoc-in-minibuffer-mode-map
              ([remap eldoc-eval-expression] . helm-eval-expression)))
    #+END_SRC
** helpful
   #+BEGIN_SRC emacs-lisp
     (use-package helpful
       :defer t
       :init
       (spacemacs/declare-prefix "hdd" "helpful")
       (spacemacs/set-leader-keys
         "hddc" 'helpful-callable
         "hddd" 'helpful-at-point
         "hddf" 'helpful-function
         "hddi" 'helpful-command
         "hddk" 'helpful-key
         "hddm" 'helpful-macro
         "hdds" 'helpful-symbol
         "hddv" 'helpful-variable))
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :defer t
       :init
       (set-variable 'magit-log-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width t 15))
       (set-variable 'magit-diff-refine-hunk 'all)
       (set-variable 'smerge-refine-ignore-whitespace nil)
       :config
       (when (executable-find "ghq")
         (let ((dirs (s-split "\n" (s-trim (shell-command-to-string "ghq list --full-path")))))
           (set-variable 'magit-repository-directories
                         (--map (cons it 0) dirs))))
       (evil-define-key 'normal magit-mode-map (kbd "<escape>") 'ignore))
   #+END_SRC
*** magit-todos
    #+BEGIN_SRC emacs-lisp
      (use-package magit-todos
        :hook (magit-status-mode . e:magit-todos-mode-on)
        :init
        (put 'magit-todos-exclude-globs
             'safe-local-variable
             '(lambda (v)
                (and (listp v)
                     (--all? (stringp it) v))))
        :config
        (defun e:magit-todos-mode-on ()
          (let ((inhibit-message t))
            (magit-todos-mode 1))))
    #+END_SRC
** navi2ch
   #+BEGIN_SRC emacs-lisp
     (use-package navi2ch
       :load-path "external/navi2ch"
       :commands (navi2ch)
       :init
       (setq navi2ch-net-http-proxy "127.0.0.1:9080")
       :config
       ;; 2chproxy.pl を起動
       (when (require 'prodigy nil t)
         (let ((cmd (expand-file-name "2chproxy.pl/2chproxy.pl" e:external-directory))
               (yml (expand-file-name "2chproxy.yml" e:custom-directory)))
           (when (and (executable-find cmd)
                      (file-exists-p yml))
             (prodigy-define-service
               :name "2chproxy.pl"
               :command (format "%s --config %s" cmd yml)
               :tags '(general)
               :kill-signal 'sigkill)))
         (defun e:prodigy:2chproxy.pl ()
           (interactive)
           (e:prodigy-start-service "2chproxy.pl"))
         (e:prodigy:2chproxy.pl)))
   #+END_SRC
** notmuch
   #+BEGIN_SRC emacs-lisp
     (use-package notmuch
       :defer t
       :init
       (set-variable 'notmuch-archive-tags '("-inbox" "-unread"))
       (set-variable 'notmuch-column-control 1.0)
       (set-variable 'notmuch-hello-thousands-separator ",")
       (set-variable 'notmuch-search-oldest-first nil)
       (set-variable 'notmuch-show-empty-saved-searches t)
       (set-variable 'notmuch-show-logo nil)
       (set-variable 'notmuch-hello-hide-tags
                     '("encrypted" "drafts" "flagged" "inbox" "sent" "signed" "spam" "unread"))
       (set-variable 'notmuch-saved-searches
                     '((:name "受信トレイ" :query "tag:inbox"   :key "i")
                       (:name "未読　　　" :query "tag:unread"  :key "u")
                       (:name "スター付き" :query "tag:flagged" :key "f")
                       (:name "送信済み　" :query "tag:sent"    :key "t")
                       (:name "下書き　　" :query "tag:draft"   :key "d")
                       (:name "すべて　　" :query "*"           :key "a")
                       (:name "迷惑メール" :query "tag:spam"    :key "s")))
       (setenv "XAPIAN_CJK_NGRAM" "1"))
   #+END_SRC
** open-by-jetbrains-ide
   #+BEGIN_SRC emacs-lisp
     (use-package open-by-jetbrains-ide
       :load-path "custom/lisp"
       :config
       (spacemacs/declare-prefix "aj" "jetbrains")
       (spacemacs/set-leader-keys
         "ajA" '("AppCode" . jetbrains/open-by-appcode)
         "ajC" '("CLion" . jetbrains/open-by-clion)
         "ajR" '("Rider" . jetbrains/open-by-rider)
         "ajc" '("PyCharm" . jetbrains/open-by-charm)
         "ajg" '("GoLand" . jetbrains/open-by-goland)
         "aji" '("IntelliJ IDEA" . jetbrains/open-by-idea)
         "ajj" '("Default" . jetbrains/open-by-ide)
         "ajm" '("RubyMine" . jetbrains/open-by-mine)
         "ajp" '("PhpStorm" . jetbrains/open-by-pstorm)
         "ajs" '("Android Studio" . jetbrains/open-by-studio)
         "ajw" '("WebStorm" . jetbrains/open-by-wstorm)
         ))
   #+END_SRC
** org
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :defer t
       :init
       (set-variable 'org-directory (expand-file-name "org/" e:private-directory))
       (set-variable 'org-default-notes-file (expand-file-name "notes.org" org-directory))
       (set-variable 'org-agenda-files (directory-files-recursively org-directory org-agenda-file-regexp))
       (set-variable 'org-refile-targets '((org-agenda-files :maxlevel . 3)))
       (set-variable 'org-todo-keywords
                     '((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
                       (sequence "WAITING(w@)" "HOLD(h@)" "|" "CANCELLED(c@)"))))
   #+END_SRC
*** ob-restclient
    #+BEGIN_SRC emacs-lisp
      (use-package ob-restclient
        :defer t
        :init
        (unless (--find (eq (car it) 'restclient) org-babel-load-languages)
          (org-babel-do-load-languages 'org-babel-load-languages
                                       (append org-babel-load-languages '((restclient . t))))))
    #+END_SRC
** persistent-scratch
   #+BEGIN_SRC emacs-lisp
     (use-package persistent-scratch
       :init
       (set-variable 'persistent-scratch-save-file (expand-file-name "scratch" e:private-directory))
       :config
       (persistent-scratch-setup-default))
   #+END_SRC
** php-mode
   #+BEGIN_SRC emacs-lisp
     (use-package php-mode
       :defer t
       :init
       (spacemacs|add-company-backends :modes php-mode))
   #+END_SRC
** prodigy
   #+BEGIN_SRC emacs-lisp
     (use-package prodigy
       :commands (e:prodigy-start-service)
       :config
       (defun e:prodigy-start-service (name)
         (let ((service (prodigy-find-service name)))
           (when service
             (prodigy-start-service service)))))
   #+END_SRC
** ranger
   #+BEGIN_SRC emacs-lisp
     (use-package ranger
       :config
       (progn ;; ranger のヘッダーラインの表示を変更
         (defun e:advice:ranger--header-lhs:override (&rest args)
           "Setup header-line for ranger buffer."
           (let* ((current-file (abbreviate-file-name (or (r--fget ranger-current-file) "")))
                  (project-root (e:project-root current-file))
                  (project-name (and project-root (format "[%s]" (e:project-name project-root))))
                  (dir  (file-name-directory current-file))
                  (file (file-name-nondirectory current-file)))
             (when project-root
               (setq dir (replace-regexp-in-string (regexp-quote project-root) "" dir)))
             (concat
              (propertize " " 'display '(space :align-to 0))
              (propertize (or project-name "") 'face 'font-lock-keyword-face)
              dir
              (propertize file 'face 'font-lock-constant-face))))
         (advice-add 'ranger--header-lhs :override 'e:advice:ranger--header-lhs:override))
       (progn ;; 常に dired の代わりに ranger を使用する
         (defun e:advice:ranger-override-dired-mode-on:after (&rest args)
           (ranger-override-dired-mode 1))
         (advice-add 'ranger-mode :after 'e:advice:ranger-override-dired-mode-on:after))
       (ranger-override-dired-mode 1))
   #+END_SRC
** recentf
   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :defer t
       :init
       (set-variable 'recentf-max-menu-items 20)
       (set-variable 'recentf-max-saved-items 3000)
       (set-variable 'recentf-filename-handlers '(abbreviate-file-name))
       :config
       (progn
         (defun e:advice:recentf-save-list:before (&rest args)
           (let ((list nil))
             (dolist (file (mapcar 'abbreviate-file-name recentf-list))
               (or (member file list)
                   (push file list)))
             (setq recentf-list (reverse list))))
         (advice-add 'recentf-save-list :before 'e:advice:recentf-save-list:before)))
   #+END_SRC
** skk
   #+BEGIN_SRC emacs-lisp
     (use-package skk
       :commands (skk-latin-mode-on skk-mode-exit)
       :hook ((evil-hybrid-state-entry . skk-latin-mode-on)
              (evil-hybrid-state-exit  . skk-mode-exit))
       :bind
       (:map global-map
             ([remap toggle-input-method] . skk-mode)
             ("C-¥" . skk-mode))
       :init
       (set-variable 'default-input-method "japanese-skk")
       (progn
         (set-variable 'skk-user-directory (expand-file-name "ddskk" e:private-directory))
         (set-variable 'skk-large-jisyo (expand-file-name "dic-mirror/SKK-JISYO.L" e:external-directory)))
       (progn
         (set-variable 'skk-preload t)
         (set-variable 'skk-egg-like-newline t)
         (set-variable 'skk-share-private-jisyo t)
         (set-variable 'skk-show-annotation t)
         (set-variable 'skk-show-inline 'vertical)
         (set-variable 'skk-sticky-key ";")
         (set-variable 'skk-use-jisx0201-input-method t))
       (when (executable-find "google-ime-skk")
         (set-variable 'skk-server-prog (executable-find "google-ime-skk"))
         (set-variable 'skk-server-inhibit-startup-server t)
         (set-variable 'skk-server-host "127.0.0.1")
         (set-variable 'skk-server-portnum 55100))
       :config
       ;; skk-study を有効化
       (require 'skk-study nil t)
       ;; google-ime-skk を起動
       (when (and (executable-find "google-ime-skk")
                  (require 'prodigy nil t))
         (prodigy-define-service
           :name "google-ime-skk"
           :command "google-ime-skk"
           :tags '(general)
           :kill-signal 'sigkill)
         (defun e:prodigy:google-ime-skk ()
           (interactive)
           (e:prodigy-start-service "google-ime-skk"))
         (e:prodigy:google-ime-skk))
       ;; evil に連動して切替え
       (defun e:advice:skk-latin-mode-on:before (&rest args)
         (unless skk-mode-invoked
           (skk-mode-invoke)))
       (advice-add 'skk-latin-mode-on :before 'e:advice:skk-latin-mode-on:before))
   #+END_SRC
** tramp
   #+BEGIN_SRC emacs-lisp
     (use-package tramp
       :defer t
       :init
       (set-variable 'tramp-default-host "localhost"))
   #+END_SRC
*** tramp-sh
    #+BEGIN_SRC emacs-lisp
      (use-package tramp-sh
        :after (tramp)
        :config
        ;; ssh/conf.d の内容を接続先に追加
        (let* ((files (--filter (not (file-directory-p it))
                                (-map 'abbreviate-file-name (directory-files "~/.ssh/conf.d/hosts" t))))
               (functions (--map (list 'tramp-parse-sconfig it) files)))
          (dolist (method '("ssh" "scp"))
            (let ((functions (append (tramp-get-completion-function method) functions)))
              (tramp-set-completion-function method functions)))))
    #+END_SRC
*** helm-tramp
    #+BEGIN_SRC emacs-lisp
      (use-package helm-tramp
        :defer t
        :config
        ;; ssh/conf.d の内容を接続先に追加
        (defun e:advice:helm-tramp--candidates:filter-return (result)
          (dolist (host (--filter (not (string-equal it tramp-default-host))
                                  (-distinct (-flatten (-map 'eval (tramp-get-completion-function "ssh"))))))
            (push (format "/%s:%s:" tramp-default-method host) result)
            (push (format "/ssh:%s|sudo:%s:/" host host) result))
          (-distinct (reverse result)))
        (advice-add 'helm-tramp--candidates :filter-return 'e:advice:helm-tramp--candidates:filter-return))
    #+END_SRC
** url
*** url-cache
    #+BEGIN_SRC emacs-lisp
      (use-package url-cache
        :defer t
        :init
        (set-variable 'url-cache-directory (expand-file-name "url/cache" spacemacs-cache-directory)))
    #+END_SRC
*** url-cookie
    #+BEGIN_SRC emacs-lisp
      (use-package url-cookie
        :defer t
        :init
        (set-variable 'url-cookie-file (expand-file-name "url/cookies" spacemacs-cache-directory)))
    #+END_SRC
** visual-regexp
   #+BEGIN_SRC emacs-lisp
     (use-package visual-regexp
       :bind
       (:map global-map
             ([remap query-replace] . vr/query-replace)))
   #+END_SRC
** vterm
   #+BEGIN_SRC emacs-lisp
     (use-package vterm
       :load-path "external/emacs-libvterm"
       :commands (vterm))
   #+END_SRC
* パッチ対応
  #+BEGIN_SRC emacs-lisp
    (require 'pkg-info)
  #+END_SRC
** avy-migemo
   #+BEGIN_SRC emacs-lisp
     (let ((version (pkg-info-format-version (pkg-info-package-version 'avy-migemo)))
           (target "20180716.1455"))
       (if (string-equal version target)
           (use-package avy-migemo
             :defer t
             :config
             (defun e:patch:avy--generic-jump:filter-args (args)
               (if (= (length args) 4)
                   args
                 (e:remove-nth 2 args)))
             (advice-add 'avy--generic-jump :filter-args 'e:patch:avy--generic-jump:filter-args))
         (spacemacs-buffer/warning "`avy-migemo' was updated.")))
   #+END_SRC
** vagrant-tramp
   #+BEGIN_SRC emacs-lisp
     (let ((version (pkg-info-format-version (pkg-info-package-version 'vagrant-tramp)))
           (target "20190125.1859"))
       (if (string-equal version target)
           (use-package vagrant-tramp
             :defer t
             :config
             (defun e:patch:vagrant-tramp--all-boxes:override (&rest args)
               "List of VMs per `vagrant global-status` as alists."
               (let* ((status-cmd "vagrant global-status --machine-readable")
                      (status-raw (shell-command-to-string status-cmd))
                      (status-lines (-drop 7 (split-string status-raw "\n")))
                      (status-data-raw (--map (mapconcat 'identity
                                                         (-drop 4 (split-string it ",")) ",")
                                              status-lines))
                      (status-data (--map (replace-regexp-in-string " " "" it) status-data-raw))
                      (status-groups (-butlast (-split-on "" status-data)))
                      (vm-attrs '(id name provider state dir)))
                 (--map (-zip vm-attrs it) status-groups)))
             (advice-add 'vagrant-tramp--all-boxes :override 'e:patch:vagrant-tramp--all-boxes:override))
         (spacemacs-buffer/warning "`vagrant-tramp' was updated.")))
   #+END_SRC
