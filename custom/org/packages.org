#+TITLE: config/packages.org
#+STARTUP: overview

* spacemacs
** キーバインドの追加
   #+begin_src emacs-lisp
   (spacemacs/set-leader-keys
     "%" 'query-replace
     "&" 'async-shell-command
     "^" 'ace-window)
   (bind-keys
    :map global-map
    ("C-;" . spacemacs/default-pop-shell)
    :map ctl-x-map
    ("C-c" . helm-M-x))
   #+end_src
** 別名を追加
   #+begin_src emacs-lisp
   (defalias 'exit 'save-buffers-kill-terminal)
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** ヘッダーライン
*** バッファーの種類毎に振分け
    #+begin_src emacs-lisp
    (defun e:setup-header-line ()
      "ヘッダーラインをなるべくいい感じに設定する"
      (cl-loop for buffer in (--filter (not (buffer-local-value 'header-line-format it))
                                       (-map #'window-buffer (window-list)))
               do (with-current-buffer buffer
                    (cond
                     ((e:current-buffer-file-name)
                      (e:setup-header-line-for-files))))))
    #+end_src
*** 一定時間毎に実行
    #+begin_src emacs-lisp
    (run-with-timer 1.0 1.0 'e:setup-header-line)
    #+end_src
** モードライン
*** 現在のファイルの文字/改行コードを分かりやすく表示
    #+begin_src emacs-lisp
    (spaceline-define-segment buffer-encoding-abbrev
      "The line ending convention used in the buffer."
      (let ((buf-coding (format "%s" buffer-file-coding-system)))
        (list (replace-regexp-in-string "-with-signature\\|-unix\\|-dos\\|-mac" "" buf-coding)
              (concat (and (string-match "with-signature" buf-coding) "ⓑ")
                      (and (string-match "unix"           buf-coding) "ⓤ")
                      (and (string-match "dos"            buf-coding) "ⓓ")
                      (and (string-match "mac"            buf-coding) "ⓜ")
                      )))
      :separator " ")
    #+end_src
*** 不要なモードを非表示
    #+begin_src emacs-lisp
    (progn
      (spacemacs|diminish company-mode)
      (spacemacs|diminish company-box-mode)
      (spacemacs|diminish emoji-cheat-sheet-plus-display-mode)
      (spacemacs|diminish evil-owl-mode)
      (spacemacs|diminish helm-migemo-mode)
      (spacemacs|diminish hybrid-mode)
      (spacemacs|diminish smartparens-mode)
      (spacemacs|diminish which-key-mode)
      (spacemacs|diminish yas-minor-mode))
    #+end_src
** shell の設定
   #+begin_src emacs-lisp
   (set-variable 'shell-file-name
                 (or (executable-find "zsh")
                     (executable-find "bash")
                     (executable-find "sh")))
   #+end_src
** パスワード関連
   #+begin_src emacs-lisp
   (progn
     (set-variable 'epa-pinentry-mode 'loopback)
     (set-variable 'password-cache-expiry 3600)
     (set-variable 'plstore-encoded t))
   #+end_src
** 折り返さない
   #+begin_src emacs-lisp
   (progn
     (setq-default truncate-lines t)
     (set-variable 'truncate-partial-width-windows nil))
   #+end_src
** 最終行の改行は EditorConfig で管理する
   #+begin_src emacs-lisp
   (progn
     (set-variable 'mode-require-final-newline nil)
     (set-variable 'require-final-newline nil))
   #+end_src
** ロックファイルを作成しない
   #+begin_src emacs-lisp
   (set-variable 'create-lockfiles nil)
   #+end_src
** 右から左に読む言語に対応しない
   #+begin_src emacs-lisp
   (setq-default bidi-display-reordering nil)
   #+end_src
** 特定のバッファを消させない
   #+begin_src emacs-lisp
   (dolist (buffer '("*scratch*" "*Messages*"))
     (with-current-buffer buffer
       (emacs-lock-mode 'kill)))
   #+end_src
** 【環境設定】Mac
*** タイトルバー
    #+begin_src emacs-lisp
    (let ((items '((ns-transparent-titlebar . t)
                   (ns-appearance . dark))))
      (dolist (item items)
        (assq-delete-all (car item) initial-frame-alist)
        (assq-delete-all (car item) default-frame-alist)
        (add-to-list 'initial-frame-alist item)
        (add-to-list 'default-frame-alist item)))
    #+end_src
*** キーボード入力(option, command関連)
    #+begin_src emacs-lisp
    (when (spacemacs/system-is-mac)
      (set-variable 'ns-command-modifier 'meta)
      (set-variable 'ns-right-command-modifier 'super)
      (set-variable 'ns-alternate-modifier 'none))
    #+end_src
** 【環境設定】WSL
*** Windows側のブラウザを起動
    #+begin_src emacs-lisp
    (let ((cmd-exe "/mnt/c/Windows/System32/cmd.exe")
          (cmd-args '("/c" "start")))
      (when (file-exists-p cmd-exe)
        (set-variable 'browse-url-generic-program  cmd-exe)
        (set-variable 'browse-url-generic-args     cmd-args)
        (set-variable 'browse-url-browser-function 'browse-url-generic)))
    #+end_src
*** DISPLAY環境変数の設定
    #+begin_src emacs-lisp
    (when (and (spacemacs/system-is-linux)
               (executable-find "cmd.exe"))
      (let ((ip (e:shell-command-to-string "cat /etc/resolv.conf | grep nameserver | awk '{print $2}'")))
        (setenv "DISPLAY" (format "%s:0.0" ip))))
    #+end_src
** ローカル設定の読込み
   #+begin_src emacs-lisp
   (let ((private-config (expand-file-name "config.el" e:private-directory)))
     (when (file-exists-p private-config)
       (load-file private-config)))
   #+end_src
* company
  #+begin_src emacs-lisp
  (use-package company
    :no-require
    :bind
    (:map company-active-map
          ("<escape>" . company-abort)
          ("C-z" . company-try-hard))
    :init
    (define-prefix-command 'e:complete-command)
    (evil-define-key 'hybrid global-map (kbd "<backtab>") #'e:complete-command)
    (bind-keys
     :map global-map
     ("C-z" . company-try-hard)
     :map e:complete-command
     ("<backtab>" . ("Company" . company-complete))
     ("d" . ("Dabbrev" . company-dabbrev))
     ("f" . ("Files" . company-files))
     ("t" . ("TabNine" . company-tabnine))))
  #+end_src
* company-tabnine
  #+begin_src emacs-lisp
  (use-package company-tabnine
    :commands (company-tabnine)
    :init
    (set-variable 'company-tabnine-binaries-folder (expand-file-name "tabnine" e:private-directory))
    (spacemacs|add-company-backends
      :backends company-tabnine
      :modes haml-mode js2-mode php-mode ruby-mode))
  #+end_src
* dired
  #+begin_src emacs-lisp
  (use-package dired
    :defer t
    :init
    (set-variable 'dired-dwim-target t)
    (set-variable 'dired-listing-switches "-Ahl")
    (set-variable 'dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\.DS_Store")
    (set-variable 'dired-recursive-copies 'always)
    (set-variable 'dired-recursive-deletes 'always)
    :config
    (bind-keys
     :map dired-mode-map
     ("C-c C-e" . wdired-change-to-wdired-mode)))
  #+end_src
* dired > ls-lisp
  #+begin_src emacs-lisp
  (use-package ls-lisp
    :after (dired)
    :init
    (set-variable 'ls-lisp-dirs-first t)
    (set-variable 'ls-lisp-format-time-list '("%Y-%m-%d %H:%M:%S" "%Y-%m-%d %H:%M:%S"))
    (set-variable 'ls-lisp-ignore-case nil)
    (set-variable 'ls-lisp-use-insert-directory-program nil)
    (set-variable 'ls-lisp-use-localized-time-format t)
    (set-variable 'ls-lisp-verbosity '(uid gid)))
  #+end_src
* dired > ls-lisp-extension
  #+begin_src emacs-lisp
  (use-package ls-lisp-extension
    :after (ls-lisp))
  #+end_src
* dired-filter
  #+begin_src emacs-lisp
  (use-package dired-filter
    :after (dired)
    :config
    (add-hook 'dired-mode-hook 'dired-filter-mode))
  #+end_src
* display-line-numbers
  #+begin_src emacs-lisp
  (use-package display-line-numbers
    :hook ((find-file . e:display-line-numbers-mode-on)
           (prog-mode . e:display-line-numbers-mode-on)
           (html-mode . e:display-line-numbers-mode-on))
    :init
    (setq-default display-line-numbers-width 4)
    :config
    (defun e:display-line-numbers-mode-on ()
      "`display-line-numbers-mode'を有効化."
      (interactive)
      (display-line-numbers-mode 1))
    (defun e:display-line-numbers-mode-off ()
      "`display-line-numbers-mode'を無効化."
      (interactive)
      (display-line-numbers-mode 0)))
  #+end_src
* eaw
  #+begin_src emacs-lisp
  (use-package eaw
    :config
    (eaw-fullwidth))
  #+end_src
* ediff
  #+begin_src emacs-lisp
  (use-package ediff
    :commands (e:ediff)
    :config
    (defun e:ediff ()
      (interactive)
      (let ((files (->> (window-list (selected-frame))
                        (-map #'window-buffer)
                        (-map #'buffer-file-name)
                        (-non-nil))))
        (if (= (length files) 2)
            (ediff (nth 0 files)
                   (nth 1 files))
          (call-interactively #'ediff)))))
  #+end_src
* elfeed
  #+begin_src emacs-lisp
  (use-package elfeed
    :defer t
    :init
    (defvar e:elfeed-spacemacs-layout-name "@Elfeed")
    (defvar e:elfeed-spacemacs-layout-binding "f")
    (spacemacs|define-custom-layout e:elfeed-spacemacs-layout-name
      :binding e:elfeed-spacemacs-layout-binding
      :body
      (call-interactively 'elfeed)
      (define-advice elfeed-search-quit-window (:after (&rest _) kill-layout)
        (persp-kill e:elfeed-spacemacs-layout-name))))
  #+end_src
* elfeed-goodies
  #+begin_src emacs-lisp
  (use-package elfeed-goodies
    :defer t
    :init
    (set-variable 'elfeed-goodies/feed-source-column-width 30)
    (set-variable 'elfeed-goodies/tag-column-width 30))
  #+end_src
* elisp-demos
  #+begin_src emacs-lisp
  (use-package elisp-demos
    :defer t
    :init
    (advice-add 'describe-function-1 :after 'elisp-demos-advice-describe-function-1)
    (advice-add 'helpful-update :after 'elisp-demos-advice-helpful-update))
  #+end_src
* emmet-mode
  #+begin_src emacs-lisp
  (use-package emmet-mode
    :bind
    (:map emmet-mode-keymap
          ("<C-return>" . nil)
          ("C-c C-j" . emmet-expand-line)
          ("C-j" . nil)))
  #+end_src
* eshell
  #+begin_src emacs-lisp
  (use-package eshell
    :defer t
    :init
    (set-variable 'eshell-history-size 100000))
  #+end_src
* eww
  #+begin_src emacs-lisp
  (use-package eww
    :defer t
    :init
    (defvar e:eww-spacemacs-layout-name "@Eww")
    (defvar e:eww-spacemacs-layout-binding "w")
    (spacemacs|define-custom-layout e:eww-spacemacs-layout-name
      :binding e:eww-spacemacs-layout-binding
      :body
      (eww "https://www.google.com/")
      (define-advice quit-window (:after (&rest _) kill-layout)
        (persp-kill e:eww-spacemacs-layout-name))))
  #+end_src
* flycheck
  #+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :init
    (set-variable 'flycheck-idle-buffer-switch-delay 3.0)
    (set-variable 'flycheck-idle-change-delay 3.0))
  #+end_src
* git-gutter
  #+begin_src emacs-lisp
  (use-package git-gutter
    :defer t
    :config
    (dolist (face '(git-gutter:added
                    git-gutter:deleted
                    git-gutter:modified))
      (set-face-attribute face nil :background (face-attribute face :foreground))))
  #+end_src
* git-gutter+
  #+begin_src emacs-lisp
  (use-package git-gutter+
    :defer t
    :config
    (dolist (face '(git-gutter+-added
                    git-gutter+-deleted
                    git-gutter+-modified))
      (set-face-attribute face nil :background (face-attribute face :foreground))))
  #+end_src
* google-translate
  #+begin_src emacs-lisp
  (use-package google-translate
    :defer t
    :init
    (set-variable 'google-translate-default-source-language nil)
    (set-variable 'google-translate-default-target-language "ja"))
  #+end_src
* helm
  #+begin_src emacs-lisp
  (use-package helm
    :commands (e:helm-git-log)
    :bind
    (:map global-map
          ([remap eval-expression] . helm-eval-expression))
    :init
    (set-variable 'helm-buffer-max-length nil)
    (spacemacs/set-leader-keys
      "igl" 'e:helm-git-log)
    :config
    (progn
      (defvar e:helm-git-log-source
        (helm-build-in-buffer-source "Git log"
          :data #'e:helm-git-log-source-data
          :real-to-display #'e:helm-git-log-source-real-to-display
          :action #'e:helm-git-log-source-action))
      (defun e:helm-git-log-regexp ()
        "\\(.+\\)\x0000\\(.+\\)")
      (defun e:helm-git-log-source-data ()
        (s-split "\n" (shell-command-to-string "git log --pretty=format:'%H%x00%s' --no-merges")))
      (defun e:helm-git-log-source-real-to-display (candidate)
        (let ((regexp (e:helm-git-log-regexp)))
          (when (string-match regexp candidate)
            (format "%s %s"
                    (propertize (match-string 1 candidate) 'face 'font-lock-comment-face)
                    (match-string 2 candidate)))))
      (defun e:helm-git-log-source-action (candidate)
        (let ((regexp (e:helm-git-log-regexp)))
          (when (string-match regexp candidate)
            (insert (match-string 2 candidate) "\n"))))
      (defun e:helm-git-log ()
        (interactive)
        (helm :sources e:helm-git-log-source
              :buffer "*HELM Git log*")))
    (helm-migemo-mode))
  #+end_src
** after: eldoc-eval
   #+begin_src emacs-lisp
   (use-package helm
     :after (eldoc-eval)
     :bind
     (:map eldoc-in-minibuffer-mode-map
           ([remap eldoc-eval-expression] . helm-eval-expression)))
   #+end_src
* helm-fzf
  #+begin_src emacs-lisp
  (use-package helm-fzf
    :defer t
    :init
    (set-variable 'helm-fzf-args nil)
    (spacemacs/set-leader-keys
      "fz" 'helm-fzf
      "pz" 'helm-fzf-project-root))
  #+end_src
* helpful
  #+begin_src emacs-lisp
  (use-package helpful
    :defer t
    :init
    (spacemacs/declare-prefix "hdd" "helpful")
    (spacemacs/set-leader-keys
      "hddc" 'helpful-callable
      "hddd" 'helpful-at-point
      "hddf" 'helpful-function
      "hddi" 'helpful-command
      "hddk" 'helpful-key
      "hddm" 'helpful-macro
      "hdds" 'helpful-symbol
      "hddv" 'helpful-variable))
  #+end_src
* magit
  #+begin_src emacs-lisp
  (use-package magit
    :defer t
    :init
    (set-variable 'magit-log-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width t 15))
    (set-variable 'magit-diff-refine-hunk 'all)
    (set-variable 'magit-diff-refine-ignore-whitespace t)
    (set-variable 'smerge-refine-ignore-whitespace nil)
    :config
    (magit-add-section-hook 'magit-status-sections-hook #'magit-insert-skip-worktree-files nil t)
    (when (executable-find "ghq")
      (set-variable 'magit-repository-directories
                    (->> (e:shell-command-to-list "ghq root --all")
                         (--map (cons it 3)))))
    (evil-define-key 'normal magit-mode-map (kbd "<escape>") 'ignore))
  #+end_src
* markdown-mode
  #+begin_src emacs-lisp
  (use-package markdown-mode
    :init
    (set-variable 'markdown-command "pandoc"))
  #+end_src
* notmuch
  #+begin_src emacs-lisp
  (use-package notmuch
    :defer t
    :init
    (set-variable 'notmuch-archive-tags '("-inbox" "-unread"))
    (set-variable 'notmuch-message-deleted-tags '("+trash" "-inbox"))
    (set-variable 'notmuch-column-control 1.0)
    (set-variable 'notmuch-hello-thousands-separator ",")
    (set-variable 'notmuch-search-oldest-first nil)
    (set-variable 'notmuch-show-empty-saved-searches nil)
    (set-variable 'notmuch-show-logo nil)
    (set-variable 'notmuch-hello-hide-tags
                  '(;; -------------------------
                    "drafts"    ;; +下書き
                    "flagged"   ;; +スター付き
                    "important" ;; +重要
                    "inbox"     ;; +受信トレイ
                    "sent"      ;; +送信済み
                    "spam"      ;; +迷惑メール
                    "trash"     ;; +ごみ箱
                    "unread"    ;; +未読
                    ;; -------------------------
                    "encrypted" ;; -暗号
                    "new"       ;; -新規(notmuch)
                    "signed"    ;; -署名
                    ;; -------------------------
                    ))
    (set-variable 'notmuch-saved-searches
                  '((:name "すべて"     :query "*"             :key "a")
                    (:name "受信トレイ" :query "tag:inbox"     :key "i")
                    (:name "未読"       :query "tag:unread"    :key "u")
                    (:name "スター付き" :query "tag:flagged"   :key "s")
                    (:name "重要"       :query "tag:important" :key "m")
                    (:name "送信済み"   :query "tag:sent"      :key "t")
                    (:name "下書き"     :query "tag:draft"     :key "d")
                    (:name "ごみ箱"     :query "tag:trash")
                    (:name "迷惑メール" :query "tag:spam")))
    (setenv "XAPIAN_CJK_NGRAM" "1"))
  #+end_src
* message
  #+begin_src emacs-lisp
  (use-package "message"
    :if (executable-find "msmtp")
    :init
    (set-variable 'sendmail-program (executable-find "msmtp"))
    (set-variable 'message-send-mail-function 'message-send-mail-with-sendmail)
    (set-variable 'message-sendmail-extra-arguments '("--read-envelope-from"))
    (set-variable 'message-sendmail-f-is-evil t)
    (set-variable 'message-kill-buffer-on-exit t))
  #+end_src
* open-by-jetbrains-ide
  #+begin_src emacs-lisp
  (use-package open-by-jetbrains-ide
    :load-path "custom/lisp"
    :init
    (when (spacemacs/system-is-mac)
     (set-variable 'jetbrains/use-toolbox-mode t)
     (set-variable 'jetbrains/ide-pstorm "phpstorm")
     (set-variable 'jetbrains/ide-mine   "rubymine"))
    :config
    (spacemacs/declare-prefix "aj" "jetbrains")
    (spacemacs/set-leader-keys
      "ajA" '("AppCode" . jetbrains/open-by-appcode)
      "ajC" '("CLion" . jetbrains/open-by-clion)
      "ajR" '("Rider" . jetbrains/open-by-rider)
      "ajc" '("PyCharm" . jetbrains/open-by-charm)
      "ajg" '("GoLand" . jetbrains/open-by-goland)
      "aji" '("IntelliJ IDEA" . jetbrains/open-by-idea)
      "ajj" '("Default" . jetbrains/open-by-ide)
      "ajm" '("RubyMine" . jetbrains/open-by-mine)
      "ajp" '("PhpStorm" . jetbrains/open-by-pstorm)
      "ajs" '("Android Studio" . jetbrains/open-by-studio)
      "ajw" '("WebStorm" . jetbrains/open-by-wstorm)
      ))
  #+end_src
* open-junk-file
  #+begin_src emacs-lisp
  (use-package open-junk-file
    :defer t
    :init
    (set-variable 'open-junk-file-format (expand-file-name "junk/%Y/%Y%m%d-%H%M%S." e:private-directory)))
  #+end_src
* ob-restclient
  #+begin_src emacs-lisp
  (use-package ob-restclient
    :defer t
    :after (org)
    :init
    (unless (--find (eq (car it) 'restclient) org-babel-load-languages)
      (org-babel-do-load-languages 'org-babel-load-languages
                                   (append org-babel-load-languages '((restclient . t))))))
  #+end_src
* paradox-github
  #+begin_src emacs-lisp
  (use-package paradox-github
    :no-require
    :after (paradox-github)
    :init
    (set-variable 'paradox-github-token (e:auth-source-get 'token :host "paradox")))
  #+end_src
* persistent-scratch
  #+begin_src emacs-lisp
  (use-package persistent-scratch
    :init
    (set-variable 'persistent-scratch-save-file (expand-file-name "scratch" e:private-directory))
    :config
    (persistent-scratch-setup-default))
  #+end_src
* persp-mode
  #+begin_src emacs-lisp
  (use-package persp-mode
    :defer t
    :init
    (set-variable 'persp-kill-foreign-buffer-behaviour nil))
  #+end_src
* shr
  #+begin_src emacs-lisp
  (use-package shr
    :defer t
    :init
    (set-variable 'shr-use-colors nil)
    (set-variable 'shr-max-image-proportion 0.6))
  #+end_src
