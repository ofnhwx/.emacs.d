#+TITLE: config/advices.org
#+STARTUP: overview

* テスト成否によるモードラインの色の変更を一定時間で戻す
  #+begin_src emacs-lisp
  (defvar e:mode-line-foreground (face-foreground 'mode-line))
  (defvar e:mode-line-background (face-background 'mode-line))
  (define-advice set-face-attribute (:around (fn &rest args) auto-reset-mode-line-colors)
    (apply fn args)
    (when (eq (car args) 'mode-line)
      (let ((inhibit-quit t))
        (sit-for 3)
        (funcall fn 'mode-line nil :foreground e:mode-line-foreground :background e:mode-line-background))))
  #+end_src
* evil
** 保存時にノーマルステートに戻す
   #+begin_src emacs-lisp
   (with-eval-after-load 'evil
     (defun e:evil-force-normal-state ()
       (cond
        ((eq evil-state 'visual)
         (evil-exit-visual-state))
        ((member evil-state '(insert hybrid))
         (evil-force-normal-state))))
     (define-advice save-buffer (:after (&rest _) evil-force-normal-state)
       (e:evil-force-normal-state))
     (define-advice keyboard-quit (:before (&rest _) evil-force-normal-state)
       (e:evil-force-normal-state)))
   #+end_src
* helm-tramp
** sshの設定ファイルから候補を追加
  #+begin_src emacs-lisp
  (with-eval-after-load 'helm-tramp
    (define-advice helm-tramp--candidates (:filter-return (result) add-candidates-from-ssh-config)
      (dolist (host (--filter (not (string-equal it tramp-default-host))
                              (-distinct (-flatten (-map 'eval (tramp-get-completion-function "ssh"))))))
        (push (format "/%s:%s:" tramp-default-method host) result)
        (push (format "/ssh:%s|sudo:%s:/" host host) result))
      (-distinct (reverse result))))
  #+end_src
* magit-todos
** TODOの表示でエラーがでないように調整
   #+begin_src emacs-lisp
   (with-eval-after-load 'magit-todos
     (define-advice magit-todos--line-item (:around (fn &rest args) ignore-errors)
       (ignore-errors (apply fn args))))
   #+end_src
* notmuch
** 終了時にレイアウトを削除
   #+begin_src emacs-lisp
   (with-eval-after-load 'notmuch
     (define-advice notmuch-bury-or-kill-this-buffer (:around (fn) kill-layout)
       (let ((kill (eq (e:major-mode) 'notmuch-hello-mode)))
         (prog1
             (funcall fn)
           (if kill
               (persp-kill notmuch-spacemacs-layout-name))))))
   #+end_src
* ranger
** diredの代わりに使用
   #+begin_src emacs-lisp
   (with-eval-after-load 'ranger
     (define-advice ranger-mode (:after (&rest _) always-use-ranger)
       (ranger-override-dired-mode 1)))
   #+end_src
* recentf
** 存在しないファイルを履歴から削除する
   #+begin_src emacs-lisp
   (with-eval-after-load 'recentf
     (define-advice recentf-save-list (:before (&rest _) remove-non-existing-files)
       (setq recentf-list (-distinct (-map 'f-short recentf-list)))
       (setq recentf-list (--filter (or (file-remote-p it)
                                        (f-exists? it))
                                    recentf-list))))
   #+end_src
